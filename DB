/*drop table if exists telcodb.customer;
create table telcodb.customer 
	( 
		username varchar(50),
        password varchar(50) NOT NULL,
        email varchar(50) UNIQUE NOT NULL,
        isInsolvent int NOT NULL DEFAULT 0,
        PRIMARY KEY (username),
        CONSTRAINT positive_insolvent CHECK (isInsolvent >= 0)
	);
insert into telcodb.customer values ('test','test','test@123.com', default);
select * from telcodb.customer;

drop table if exists telcodb.servicePackage;
create table telcodb.servicePackage
	(
		id int NOT NULL auto_increment,
        name varchar(50) UNIQUE NOT NULL,
        PRIMARY KEY (id)
    );
    
insert into telcodb.servicePackage values (1,'Basic');
insert into telcodb.servicePackage values (2,'Family');
insert into telcodb.servicePackage values (3,'Business');
insert into telcodb.servicePackage values (4,'All Inclusive');
    
drop table if exists telcodb.validityPeriod;
create table validityPeriod
	(	
		id int NOT NULL auto_increment,
        duration int NOT NULL,
        fee int NOT NULL,
        servicePackage int NOT NULL,
        PRIMARY KEY (id),
        #PRIMARY KEY (duration,servicePackage),
        CONSTRAINT id_package FOREIGN KEY (servicePackage) REFERENCES telcodb.servicePackage (id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT duration_12_24_36 CHECK (duration = 12 or duration = 24 or duration = 36)
    );
    
insert into telcodb.validityPeriod values (1, 12, 20, 1), (2, 24, 18, 1), (3, 36, 15, 1);
insert into telcodb.validityPeriod values (4, 12, 30, 2), (5, 24, 24, 2), (6, 36, 22, 2);
insert into telcodb.validityPeriod values (7, 12, 25, 3), (8, 24, 24, 3), (9, 36, 23, 3);
insert into telcodb.validityPeriod values (10, 12, 20, 4), (11, 24, 18, 4), (12, 36, 15, 4);

#select * from telcodb.package p join telcodb.validityPeriod v on p.id = v.servicePackage;
    
drop table if exists telcodb.service;
create table telcodb.service
	(
		id int NOT NULL auto_increment,
        serPackage int, #NOT NULL ?
        service_type varchar(50) NOT NULL,
        num_minutes int,
        num_SMS int,
        fee_extra_min int,
        fee_extra_SMS int,
        num_GB int,
        fee_extra_GB int,
        PRIMARY KEY (id),
        CONSTRAINT id_package2 FOREIGN KEY (serPackage) REFERENCES telcodb.servicePackage (id) ON DELETE CASCADE ON UPDATE CASCADE 
    );

insert into telcodb.service values (1,1,'Mobilephoneservice',600,1000,10,10,null,null), (2,2,'Mobilephoneservice',1200,100,20,5,null,null),
								   (3,2,'Fixedphoneservice',null,null,null,null,null,null), (4,3,'Fixedinternetservice',null,null,null,null,50,20), 
                                   (5,4,'Mobilephoneservice',2000,2000,30,30,null,null), (6,4,'Fixedinternetservice',null,null,null,null,100,30),
                                   (7,4,'Mobileinternetservice',null,null,null,null,80,25);

drop table if exists telcodb.product;
create table telcodb.product
	(
		name varchar(50) NOT NULL,
        fee int NOT NULL,
        PRIMARY KEY (name)
    );

insert into telcodb.product values('SMS news feed', 10), ('Internet TV channel', 20), ('5G connection', 6), ('Formula1', 15), ('Football', 30);
    
drop table if exists telcodb.optProductsForPackage;
create table telcodb.optProductsForPackage
	(
		product varchar(50) NOT NULL,
        servicepackage int NOT NULL,
        PRIMARY KEY (product, servicepackage),
        CONSTRAINT id_product FOREIGN KEY (product) REFERENCES telcodb.product (name) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT id_package3 FOREIGN KEY (servicepackage) REFERENCES telcodb.servicePackage (id) ON DELETE CASCADE ON UPDATE CASCADE 
    );

insert into telcodb.optProductsForPackage values ('SMS news feed', 2), ('5G connection', 2);
insert into telcodb.optProductsForPackage values ('Internet TV channel', 3), ('Formula1', 3), ('Football', 3);
insert into telcodb.optProductsForPackage values ('SMS news feed', 4), ('5G connection', 4), ('Internet TV channel', 4), ('Formula1', 4), ('Football', 4);

drop table if exists telcodb.customOrder;
create table telcodb.customOrder
	(
		id int NOT NULL auto_increment,
        creationDate datetime NOT NULL,
        username varchar(50) NOT NULL,
        servicePackage int NOT NULL,
        validity int NOT NULL,
        totalValue int NOT NULL,
        startDate date NOT NULL,
        isValid int NOT NULL,
        PRIMARY KEY(id),
        CONSTRAINT id_user FOREIGN KEY (username) REFERENCES telcodb.customer (username) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT id_service4 FOREIGN KEY (servicePackage) REFERENCES telcodb.servicePackage (id),
        CONSTRAINT id_validity FOREIGN KEY (validity) REFERENCES telcodb.validityPeriod (id)
    );
    
drop table if exists telcodb.selectedProductsForOrder;
create table telcodb.selectedProductsForOrder
	(
		product varchar(50) NOT NULL,
        customOrder int NOT NULL,
        PRIMARY KEY (product, customOrder),
        CONSTRAINT id_product2 FOREIGN KEY (product) REFERENCES telcodb.product (name),
        CONSTRAINT id_order FOREIGN KEY (customOrder) REFERENCES telcodb.customOrder (id)
    );
    
#select * from telcodb.customOrder;
#select * from telcodb.selectedProductsForOrder;
#select * from telcodb.customer;

drop table if exists telcodb.serviceActivationSchedule;
create table  telcodb.serviceActivationSchedule
	(
		id int NOT NULL auto_increment,
        username varchar(50) NOT NULL,
        activationDate date NOT NULL,
        deactivationDate date NOT NULL,
        CONSTRAINT id_customer FOREIGN KEY (username) REFERENCES telcodb.customer (username),
        PRIMARY KEY(id)
    );
    
drop table if exists telcodb.productsForActivationSchedule;
create table  telcodb.productsForActivationSchedule
	(
		product varchar(50) NOT NULL,
        activationSchedule int NOT NULL,
        PRIMARY KEY (product, activationSchedule),
        CONSTRAINT id_product3 FOREIGN KEY (product) REFERENCES telcodb.product (name),
        CONSTRAINT id_schedule FOREIGN KEY (activationSchedule) REFERENCES telcodb.serviceActivationSchedule (id)
    );
    
drop table if exists telcodb.servicesForActivationSchedule;
create table  telcodb.servicesForActivationSchedule
	(
		service int NOT NULL,
        activationSchedule int NOT NULL,
        PRIMARY KEY (service, activationSchedule),
        CONSTRAINT id_service FOREIGN KEY (service) REFERENCES telcodb.service (id),
        CONSTRAINT id_schedule2 FOREIGN KEY (activationSchedule) REFERENCES telcodb.serviceActivationSchedule (id)
    );
    
#select * from serviceActivationSchedule;
#select * from servicesForActivationSchedule;
#select * from productsForActivationSchedule;
    
drop table if exists telcodb.auditingTable;
create table  telcodb.auditingTable
	(
		id int NOT NULL auto_increment,
        username varchar(50) NOT NULL,
        email varchar(50) NOT NULL,
        amount int NOT NULL,
        rejectionDateTime datetime NOT NULL,
        PRIMARY KEY(id)
    );
#select * from auditingTable
    
drop table if exists telcodb.employee;
create table employee
	( 
		username varchar(50),
        password varchar(50) NOT NULL,
        PRIMARY KEY (username)
	);
    
insert into employee values ('admin','admin');*/


/********** CLEAN DB ***************************
drop table if exists telcodb.servicesForActivationSchedule;
drop table if exists telcodb.productsForActivationSchedule;
drop table if exists telcodb.serviceActivationSchedule;
drop table if exists telcodb.auditingTable;
drop table if exists telcodb.employee;
drop table if exists telcodb.selectedProductsForOrder;
drop table if exists telcodb.customOrder;
drop table if exists telcodb.optProductsForPackage;
drop table if exists telcodb.product;
drop table if exists telcodb.service;
drop table if exists telcodb.validityPeriod;
drop table if exists telcodb.servicePackage;
drop table if exists telcodb.customer;*/

#select * from serviceActivationSchedule a join servicesForActivationSchedule s on a.id = s.activationSchedule;
#select * from serviceActivationSchedule a join productsForActivationSchedule p on a.id = p.activationSchedule;


/* DA CAMBIARE METTENDO ID
drop view if exists totalPurchasesPerPackage;
create view totalPurchasesPerPackage as
select s.name as package, count(o.id) as total
from servicePackage s left join customOrder o on s.id = o.servicePackage
where o.isValid = 0 or o.isValid is null
group by s.id;*/

#select * from customOrder;
#select * from totalPurchasesPerPackage;

/* DA CAMBIARE METTENDO ID
drop view if exists totalPurchasesPerPackageAndValidityPeriod;
create view totalPurchasesPerPackageAndValidityPeriod as
select s.name as package, v.duration as validityPeriod, count(o.id) as total
from servicePackage s join validityPeriod v on v.servicePackage = s.id 
					  left join customOrder o on o.validity = v.id
where o.isValid = 0 or o.isValid is null and v.servicePackage = s.id
group by s.id, v.duration;*/

#select * from totalPurchasesPerPackageAndValidityPeriod;

/*drop view if exists salesValue;
create view salesValue as
select s.name as package, coalesce(sum(o.totalvalue),0) as totalSale, sum(case when v.id = o.validity then v.duration*v.fee else 0 end) as saleWithoutProd
from servicePackage s join validityPeriod v on v.servicePackage = s.id 
					  left join customOrder o on o.validity = v.id
where o.isValid = 0 or o.isValid is null and v.servicePackage = s.id
group by s.id;*/

#select * from salesValue;

/*drop view if exists averageProductsSoldForPackage;
create view averageProductsSoldForPackage as
select package as package, avg(count) as averageProducts
from (	select o.servicePackage as package, count(sp.product) as count
		from customOrder o left join selectedProductsForOrder sp on o.id = sp.customOrder
        where o.isValid = 0 or o.isValid is null
		group by o.id
	 ) as counts
group by package;*/
#select * from averageProductsSoldForPackage;

/*drop view if exists insolventUsers;
create view insolventUsers as 
select username from customer where isInsolvent > 0;
select * from insolventUsers;

drop view if exists suspendedOrders;
create view suspendedOrders as 
select id as orderId, creationDate, totalValue from customOrder where isValid > 0 order by creationDate;
select * from suspendedOrders;

drop view if exists alerts;
create view alerts as 
select * from auditingTable order by rejectionDateTime desc;
select * from alerts;*/

/*drop view if exists bestSellerProduct;
create view bestSellerProduct as
select p.name as product, sum(p.fee*v.duration) as totalSales
from customOrder o join selectedProductsForOrder sp on o.id = sp.customOrder
				   join product p on sp.product = p.name
				   join validityPeriod v on v.id = o.validity
where o.isValid = 0
group by p.name
order by totalSales desc
limit 1;*/

#select * from bestSellerProduct

/********** CLEAN VIEWS ******************
drop view if exists totalPurchasesPerPackage;
drop view if exists totalPurchasesPerPackageAndValidityPeriod;
drop view if exists salesValue;
drop view if exists averageProductsSoldForPackage;
drop view if exists insolventUsers;
drop view if exists suspendedOrders;
drop view if exists alerts;
drop view if exists bestSellerProduct;
*********************************************/

/*drop table if exists telcodb.totalPurchasesPerPackage;
create table telcodb.totalPurchasesPerPackage
	(
		package int UNIQUE NOT NULL,
        total int NOT NULL,
        PRIMARY KEY (package)
    );
    
drop table if exists telcodb.totalPurchasesPerPackageAndValidityPeriod;
create table telcodb.totalPurchasesPerPackageAndValidityPeriod
	(
		id int NOT NULL auto_increment,
		package int NOT NULL,
        validity int NOT NULL,
        total int NOT NULL,
        PRIMARY KEY (id)
    );
    
drop table if exists telcodb.salesValue;
create table telcodb.salesValue
	(
		package int UNIQUE NOT NULL,
        totalSale int NOT NULL,
        saleWithoutProd int NOT NULL,
        PRIMARY KEY (package)
    );
    
drop table if exists averageProductsSoldForPackage;
create table averageProductsSoldForPackage
	(
		package int UNIQUE NOT NULL,
        averageProducts float NOT NULL,
        PRIMARY KEY (package)
    );
    
drop table if exists bestSellerProduct;
create table bestSellerProduct
	(
		product varchar(50) NOT NULL,
        totalSales int NOT NULL,
        PRIMARY KEY (product)
    );*/

/********** CLEAN MATERIALIZED VIEWS ******************
drop table if exists totalPurchasesPerPackage;
drop table if exists totalPurchasesPerPackageAndValidityPeriod;
drop table if exists salesValue;
drop table if exists averageProductsSoldForPackage;
drop table if exists insolventUsers;
drop table if exists suspendedOrders;
drop table if exists alerts;
drop table if exists bestSellerProduct;
*********************************************/

/*drop trigger if exists package_insert_totPurchases;
create trigger package_insert_totPurchases
after insert on servicePackage
for each row
insert into totalPurchasesPerPackage values (new.id,0);

drop trigger if exists package_delete_totPurchases;
create trigger package_delete_totPurchases
after delete on servicePackage
for each row
delete from totalPurchasesPerPackage where package = old.id;*/

#INUTILE
/*drop trigger if exists package_updatepkg_totPurchases;
delimiter $$
create trigger package_updatepkg_totPurchases
after update on servicePackage
for each row
begin
	if new.id <> old.id then
		update totalPurchasesPerPackage set package = new.id where package = old.id;
	end if;
end $$
delimiter ;*/

/*drop trigger if exists package_insertorder_totPurchases;
delimiter $$
create trigger package_insertorder_totPurchases
after insert on customOrder
for each row
begin
	if new.isValid = 0 then
		update totalPurchasesPerPackage set total = total + 1 where package = new.servicePackage;
	end if;
end $$
delimiter ;*/

/*drop trigger if exists package_updateorder_totPurchases;
delimiter $$
create trigger package_updateorder_totPurchases
after update on customOrder
for each row
begin
	if new.isValid = 0 then
		update totalPurchasesPerPackage set total = total + 1 where package = new.servicePackage;
	end if;
end $$
delimiter ;*/

/*drop trigger if exists package_deleteorder_totPurchases;
delimiter $$
create trigger package_deleteorder_totPurchases
after delete on customOrder
for each row
begin
	if old.isValid = 0 then
		update totalPurchasesPerPackage set total = total - 1 where package = old.servicePackage;
	end if;
end $$
delimiter ;*/

#update servicePackage set id = 10 where id = 9; !!! BISOGNA AGGIUNGERE LA CASCADE !!!

/*drop trigger if exists validity_insert_totPurchasesAndVP;
create trigger validity_insert_totPurchasesAndVP
after insert on validityPeriod
for each row
insert into totalPurchasesPerPackageAndValidityPeriod values(default,new.servicePackage,new.id,0);

drop trigger if exists validity_delete_totPurchasesAndVP;
create trigger validity_delete_totPurchasesAndVP
after delete on validityPeriod
for each row
delete from totalPurchasesPerPackageAndValidityPeriod where validity = old.id;

drop trigger if exists package_insertorder_totPurchasesAndVP;
delimiter $$
create trigger package_insertorder_totPurchasesAndVP
after insert on customOrder
for each row
begin
	if new.isValid = 0 then
		update totalPurchasesPerPackageAndValidityPeriod set total = total + 1 where package = new.servicePackage and validity = new.validity;
	end if;
end $$
delimiter ;

drop trigger if exists package_updateorder_totPurchasesAndVP;
delimiter $$
create trigger package_updateorder_totPurchasesAndVP
after update on customOrder
for each row
begin
	if new.isValid = 0 then
		update totalPurchasesPerPackageAndValidityPeriod set total = total + 1 where package = new.servicePackage and validity = new.validity;
	end if;
end $$
delimiter ;

drop trigger if exists package_deleteorder_totPurchasesAndVP;
delimiter $$
create trigger package_deleteorder_totPurchasesAndVP
after delete on customOrder
for each row
begin
	if old.isValid = 0 then
		update totalPurchasesPerPackageAndValidityPeriod set total = total - 1 where package = old.servicePackage and validity = old.validity;
	end if;
end $$
delimiter ;*/

/*drop trigger if exists package_insert_salesValue;
create trigger package_insert_salesValue
after insert on servicePackage
for each row
insert into salesValue values (new.id,0,0);

drop trigger if exists package_delete_salesValue;
create trigger package_delete_salesValue
after delete on servicePackage
for each row
delete from salesValue where package = old.id;

#INUTILE
drop trigger if exists package_updatepkg_salesValue;
delimiter $$
create trigger package_updatepkg_salesValue
after update on servicePackage
for each row
begin
	if new.id <> old.id then
		update salesValue set package = new.id where package = old.id;
	end if;
end $$
delimiter ;

drop trigger if exists package_insertorder_salesValue;
delimiter $$
create trigger package_insertorder_salesValue
after insert on customOrder
for each row
begin
	if new.isValid = 0 then
		update salesValue set totalSale = totalSale + new.totalValue, 
							  saleWithoutProd = saleWithoutProd + (select fee*duration from validityPeriod v where v.id = new.validity)
		where package = new.servicePackage;
	end if;
end $$
delimiter ;

drop trigger if exists package_updateorder_salesValue;
delimiter $$
create trigger package_updateorder_salesValue
after update on customOrder
for each row
begin
	if new.isValid = 0 then
		update salesValue set totalSale = totalSale + new.totalValue, 
							  saleWithoutProd = saleWithoutProd + (select fee*duration from validityPeriod v where v.id = new.validity)
		where package = new.servicePackage;
	end if;
end $$
delimiter ;

drop trigger if exists package_deleteorder_salesValue;
delimiter $$
create trigger package_deleteorder_salesValue
after delete on customOrder
for each row
begin
	if old.isValid = 0 then
		update salesValue set totalSale = totalSale - old.totalValue, 
							  saleWithoutProd = saleWithoutProd - (select fee*duration from validityPeriod v where v.id = old.validity)
		where package = old.servicePackage;
	end if;
end $$
delimiter ;*/

/*drop trigger if exists product_updateoptproduct_avgProdPackage;
delimiter $$
create trigger product_updateoptproduct_avgProdPackage
after insert on selectedProductsForOrder
for each row #DOVREBBE ESSERE STATEMENT MA NON SUPPPORTATO DA MYSQLproduct_updateoptproduct_avgProdPackageproduct_updateoptproduct_avgProdPackage
begin
	declare sp int;
	if (select o.isValid from customOrder o where o.id = new.customOrder) = 0 then
		set sp = (select o.servicePackage from customOrder o where o.id = new.customOrder);
		update averageProductsSoldForPackage set averageProducts =
		( select avg(count) from (  select count(sp.product) as count
									from customOrder o left join selectedProductsForOrder sp on o.id = sp.customOrder
									where o.isValid = 0 and o.servicePackage = sp
									group by o.id ) as counts)
		where package = sp;
	end if;
end $$
delimiter ;

drop trigger if exists product_deleteoptproduct_avgProdPackage;
delimiter $$
create trigger product_deleteoptproduct_avgProdPackage
after delete on selectedProductsForOrder
for each row
begin
	declare sp int;
	if (select o.isValid from customOrder o where o.id = old.customOrder) = 0 then
		set sp = (select o.servicePackage from customOrder o where o.id = old.customOrder);
		update averageProductsSoldForPackage set averageProducts =
		( select avg(count) from (  select count(sp.product) as count
									from customOrder o left join selectedProductsForOrder sp on o.id = sp.customOrder
									where o.isValid = 0 and o.servicePackage = sp
									group by o.id ) as counts)
		where package = sp;
	end if;
end $$
delimiter ;

drop trigger if exists order_updateoptproduct_avgProdPackage;
delimiter $$
create trigger order_updateoptproduct_avgProdPackage
after update on customOrder
for each row
begin
	if new.isValid = 0 then
		update averageProductsSoldForPackage set averageProducts =
		( select avg(count) from (  select count(sp.product) as count
									from customOrder o left join selectedProductsForOrder sp on o.id = sp.customOrder
									where o.isValid = 0 and o.servicePackage = new.servicePackage
									group by o.id ) as counts)
		where package = new.servicePackage;
	end if;
end $$
delimiter ;

drop trigger if exists package_createoptproduct_avgProdPackage;
create trigger package_createoptproduct_avgProdPackage
after insert on servicePackage
for each row
insert into averageProductsSoldForPackage values (new.id,0);

drop trigger if exists package_deleteoptproduct_avgProdPackage;
create trigger package_deleteoptproduct_avgProdPackage
after delete on servicePackage
for each row
delete from averageProductsSoldForPackage where package = old.id;*/

/*drop trigger if exists insert_selprod_bestSeller;
delimiter $$
create trigger insert_selprod_bestSeller
after insert on selectedProductsForOrder
for each row
begin
	declare currentMax int;
    declare newValue int;
	if (select o.isValid from customOrder o where o.id = new.customOrder) = 0 then			
		set currentMax = (select max(totalSales) from bestSellerProduct);
        set newValue = (select sum(p.fee*v.duration) 
						from customOrder o join selectedProductsForOrder sp on o.id = sp.customOrder
						join product p on sp.product = p.name
						join validityPeriod v on v.id = o.validity
						where o.isValid = 0 and p.name = new.product
						group by p.name);
        if currentMax is null then
			insert into bestSellerProduct values(new.product,newValue);
        elseif currentMax < newValue then
			update bestSellerProduct set product = new.product, totalSales = newValue where product is not null;
		end if;
	end if;
end $$
delimiter ;*/

/*drop trigger if exists update_order_bestSeller;
delimiter $$
create trigger update_order_bestSeller
after update on customOrder
for each row
begin
	declare currentMax int;
    declare newValue int;
    declare newProd varchar(50);
	if new.isValid = 0 then			
		set currentMax = (select max(totalSales) from bestSellerProduct);
        set newValue = (select max(val) from (select sum(p.fee*v.duration) as val
						from customOrder o join selectedProductsForOrder sp on o.id = sp.customOrder
						join product p on sp.product = p.name
						join validityPeriod v on v.id = o.validity
						where o.isValid = 0
						group by p.name) as s);
        if currentMax is null then
			set newProd = (select product from(select p.name as product, sum(p.fee*v.duration) as val
						from customOrder o join selectedProductsForOrder sp on o.id = sp.customOrder
						join product p on sp.product = p.name
						join validityPeriod v on v.id = o.validity
						where o.isValid = 0
						group by p.name) as t where val = newValue);
			insert into bestSellerProduct values(newProd,newValue);
        elseif currentMax < newValue then
			set newProd = (select product from(select p.name as product, sum(p.fee*v.duration) as val
						from customOrder o join selectedProductsForOrder sp on o.id = sp.customOrder
						join product p on sp.product = p.name
						join validityPeriod v on v.id = o.validity
						where o.isValid = 0
						group by p.name) as t where val = newValue);
			update bestSellerProduct set product = newProd, totalSales = newValue where product is not null;
		end if;
	end if;
end $$
delimiter ;*/

#select * from totalPurchasesPerPackage;
#select * from totalPurchasesPerPackageAndValidityPeriod;
#select * from salesValue;
#select * from averageProductsSoldForPackage;
#select * from bestSellerProduct;
